<?xml version="1.0" encoding="UTF-8"?>
<faqs xmlns="http://maven.apache.org/FML/1.0.1" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/FML/1.0.1 http://maven.apache.org/xsd/fml-1.0.1.xsd"
    title="Frequently Asked Questions" toplink="false">

    <part id="general">
        <title>General</title>
        <faq id="unfamiliar-java">
            <question>Why should I code Java in such an unfamiliar way?</question>
            <answer>
                <p>Java is more or less the only contemporary general purpose language which does not yet
                have native support for lambdas or first class functions. Java 8 will get support for this,
                when it is eventually released.</p> 
                
                <p>It is <em>not</em> about being able to write lots of one-liners. You <em>will</em> be
                able to express more behavior in less code, but you should still use lines as a way of
                grouping your program logic into "chunks" you can reason about, and making your code
                readable.</p> 
                <p>Writing code by composing functions together, will
                arguably produce more robust and correct code. Both because your code will be closer
                to how you would actually verbally express the original problem you are solving, instead
                of thinking about looping, conditional checks, and many corner cases are handled
                automatically. It requires less testing to cover all the branches, simply because
                there are often only one branch of program flow.
                The branches are internal to the various API methods,
                and they are already thorougly testet. So if the semantics of the expressed code makes
                sense, and the compiler approves the function composition, then you can be very sure
                that the code will work as intended, already the first time you run it.</p>
                <p>If you write
                unit tests (and you should!), you will often feel that the test actually more or
                less repeats what you have already "declared" in the production code. In these cases
                it is often appropriate to move the tests to a higher level of abstraction; a bit closer
                to the actualy problem or feature you are solving. Use a code coverage tool to verify that
                the different parts are executed with a higher level test. Since you don't have all
                these paths your code may exectute for different cases, the need for very low level
                unit testing diminishes, and tests can focus on higher level behavior.</p>  
            </answer>
        </faq>
        <faq id="wait-java8">
            <question>
                But Java 8 is right around the corner! Shouldn't I just wait until I get native lambdas instead
                of littering these pseudo-functions all over my code?
            </question>
            <answer>
                For code you are writing today on Java 7 or below, there is really no reason to wait. You
                will get a head start to thinking in a more functional way, so you will be ready to exploit
                the new language features in Java 8, when it finally arrives. In addition, if you worry about
                refactoring your code to use Java 8 features later, this will actually be an easier task if
                the code already is done in a functional manner. The API of Motif is actually not that far from
                the new
                <a href="http://download.java.net/jdk8/docs/api/java/util/stream/Stream.html">Stream API</a>
                of Java 8. And importantly, code you write today which accepts any of the functional
                interfaces of Motif, will be ready for use with Java 8 lambdas out-of-the-box. You can
                pass lambdas to methods which accepts Motif's functional interfaces, and the Java 8 compiler
                will translate the lambdas to actual implementations of <code>Predicate</code>,
                <code>Fn</code>, etc.
            </answer>
        </faq>
        <faq id="other-libraries">
            <question>Why should I use Motif instead of Guava/LambdaJ/other library?</question>
            <answer>
                All these libraries are great ways to learn how to program in
                a more functional manner. You can read an opinionated comparison between
                Motif and some other librarys <a href="libraries-compare.html">here</a>.
            </answer>
        </faq>
    </part>

</faqs>